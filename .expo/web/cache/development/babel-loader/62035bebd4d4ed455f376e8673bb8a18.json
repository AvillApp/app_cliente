{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ingjeisson/Documents/proyectos/personal/avill_cliente/app/Screens/push.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\nimport Constants from \"expo-constants\";\n\nvar Push = function (_React$Component) {\n  _inherits(Push, _React$Component);\n\n  var _super = _createSuper(Push);\n\n  function Push() {\n    var _this;\n\n    _classCallCheck(this, Push);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      expoPushToken: \"\",\n      notification: {}\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee() {\n      var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Constants.isDevice) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n            case 3:\n              _await$Permissions$ge = _context.sent;\n              existingStatus = _await$Permissions$ge.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== \"granted\")) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n            case 9:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n              finalStatus = status;\n\n            case 12:\n              if (!(finalStatus !== \"granted\")) {\n                _context.next = 15;\n                break;\n              }\n\n              alert(\"Failed to get push token for push notification!\");\n              return _context.abrupt(\"return\");\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 17:\n              token = _context.sent;\n\n              _this.setState({\n                expoPushToken: token\n              });\n\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"token_push\", token));\n\n            case 21:\n              _context.next = 24;\n              break;\n\n            case 23:\n              alert(\"Must use physical device for Push Notifications\");\n\n            case 24:\n              if (Platform.OS === \"android\") {\n                Notifications.createChannelAndroidAsync(\"default\", {\n                  name: \"default\",\n                  sound: true,\n                  priority: \"max\",\n                  vibrate: [0, 250, 250, 250]\n                });\n              }\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleNotification = function (notification) {\n      Vibration.vibrate();\n      console.log(notification);\n\n      _this.setState({\n        notification: notification\n      });\n    };\n\n    _this.sendPushNotification = function _callee2() {\n      var message, response;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              message = {\n                to: _this.state.expoPushToken,\n                sound: \"default\",\n                title: \"Original Title\",\n                body: \"And here is the body!\",\n                data: {\n                  data: \"goes here\"\n                },\n                _displayInForeground: true\n              };\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"https://exp.host/--/api/v2/push/send\", {\n                method: \"POST\",\n                headers: {\n                  Accept: \"application/json\",\n                  \"Accept-encoding\": \"gzip, deflate\",\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(message)\n              }));\n\n            case 3:\n              response = _context2.sent;\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(Push, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.registerForPushNotificationsAsync();\n      this._notificationSubscription = Notifications.addListener(this._handleNotification);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return Push;\n}(React.Component);\n\nexport { Push as default };","map":{"version":3,"sources":["/Users/ingjeisson/Documents/proyectos/personal/avill_cliente/app/Screens/push.js"],"names":["React","Notifications","Permissions","Constants","Push","state","expoPushToken","notification","registerForPushNotificationsAsync","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","setState","AsyncStorage","setItem","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","_handleNotification","Vibration","console","log","sendPushNotification","message","to","title","body","data","_displayInForeground","fetch","method","headers","Accept","JSON","stringify","response","_notificationSubscription","addListener","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Vibration, Platform, AsyncStorage } from \"react-native\";\nimport { Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\nimport Constants from \"expo-constants\";\n\nexport default class Push extends React.Component {\n  state = {\n    expoPushToken: \"\",\n    notification: {},\n  };\n\n  registerForPushNotificationsAsync = async () => {\n    if (Constants.isDevice) {\n      const { status: existingStatus } = await Permissions.getAsync(\n        Permissions.NOTIFICATIONS\n      );\n      let finalStatus = existingStatus;\n      if (existingStatus !== \"granted\") {\n        const { status } = await Permissions.askAsync(\n          Permissions.NOTIFICATIONS\n        );\n        finalStatus = status;\n      }\n      if (finalStatus !== \"granted\") {\n        alert(\"Failed to get push token for push notification!\");\n        return;\n      }\n      token = await Notifications.getExpoPushTokenAsync();\n      //console.log(token);\n      this.setState({ expoPushToken: token });\n      await AsyncStorage.setItem(\"token_push\", token);\n      \n    } else {\n      alert(\"Must use physical device for Push Notifications\");\n    }\n\n    if (Platform.OS === \"android\") {\n      Notifications.createChannelAndroidAsync(\"default\", {\n        name: \"default\",\n        sound: true,\n        priority: \"max\",\n        vibrate: [0, 250, 250, 250],\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.registerForPushNotificationsAsync();\n\n    // Handle notifications that are received or selected while the app\n    // is open. If the app was closed and then opened by tapping the\n    // notification (rather than just tapping the app icon to open it),\n    // this function will fire on the next tick after the app starts\n    // with the notification data.\n    this._notificationSubscription = Notifications.addListener(\n      this._handleNotification\n    );\n  }\n\n  _handleNotification = (notification) => {\n    Vibration.vibrate();\n    console.log(notification);\n    this.setState({ notification: notification });\n  };\n\n  // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/dashboard/notifications\n  sendPushNotification = async () => {\n    const message = {\n      to: this.state.expoPushToken,\n      sound: \"default\",\n      title: \"Original Title\",\n      body: \"And here is the body!\",\n      data: { data: \"goes here\" },\n      _displayInForeground: true,\n    };\n    const response = await fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-encoding\": \"gzip, deflate\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(message),\n    });\n  };\n\n  render() {\n    return <View></View>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}